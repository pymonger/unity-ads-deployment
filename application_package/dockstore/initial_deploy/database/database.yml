# Commit: db4678a https://github.com/dockstore/dockstore-deploy/commits/db4678a
Description: >
  Manages Postgres RDS.

Parameters:
  ResourcePrefix:
    Description: Env prefix (dev or test)
    Type: String
    Default: 'dev'
  VpcId:
    Description: ID for the VPC the LB is to be within
    Type: String
  SubnetId1:
    Description: ID for the first subnet the LB is to be accessible on
    Type: String
  SubnetId2:
    Description: ID for the second subnet the LB is to be accessible on
    Type: String
  AvailabilityZone:
    Description: The AWS availability zone, e.g, us-east-1a
    Type: String
    AllowedValues:
      # Just support us-east-1 and us-west-2
      #- us-east-1a
      #- us-east-1b
      - us-west-2a
      - us-west-2b
      - us-west-2c
      - us-west-2d
      #- us-east-2a
      #- us-east-2b
    Default: us-west-2b
  DBAllocatedStorage:
    Description: 'The allocated storage size, specified in GB (ignored when DBSnapshotIdentifier is set, value used from snapshot).'
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 10
  DBInstanceClass:
    Description: 'The instance type of database server.'
    Type: String
    Default: 'db.t3.small'
  DBName:
    Description: 'Name of the database (ignored when DBSnapshotIdentifier is set, value used from snapshot).'
    Type: String
    Default: dev
  DBSnapshot:
    Description: 'AWS ARN of the RDB snapshot to restore new deployment of the database from. Create empty DB if not provided.'
    Type: String
    Default: ''
  DBBackupRetentionPeriod:
    Description: 'The number of days to keep snapshots of the database.'
    Type: Number
    MinValue: 0
    MaxValue: 10
    Default: 5
  DBMasterUserPassword:
    Description: 'The master password for the DB instance (ignored when DBSnapshotIdentifier is set, value used from snapshot).'
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/DBPostgresPassword
    NoEcho: true
  DBMultiAZ:
    Description: 'Specifies if the database instance is deployed to multiple Availability Zones for HA.'
    Type: String
    Default: false
    AllowedValues: [true, false]
  PreferredBackupWindow:
    Description: 'The daily time range in UTC during which you want to create automated backups. Default is 11:54 PDT/2:54 EDT'
    Type: String
    Default: '06:54-07:24'
  PreferredMaintenanceWindow:
    Description: The weekly time range (in UTC) during which system maintenance can occur.
    Type: String
    Default: 'sat:07:00-sat:07:30'
  EngineVersion:
    Description: 'PostgreSQL version.'
    Type: String
    Default: '13.3'
    #aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"
  EnableIAMDatabaseAuthentication:
    Description: 'Enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts (https://docs.aws.amazon.com/AmazonRDS/ladev/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html).'
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: RDS Instances Details
        Parameters:
          - AvailabilityZone
          - DBInstanceClass
      - Label:
          default: Database settings, you probably want to accept defaults
        Parameters:
          - DBAllocatedStorage
          - DBName
          - DBBackupRetentionPeriod
          - DBMasterUserPassword
          - DBSnapshot
          - DBMultiAZ
          - PreferredBackupWindow
          - PreferredMaintenanceWindow
          - EngineVersion
          - EnableIAMDatabaseAuthentication

# If using DB snapshot to restore DB from, then can't use DBName to create
# AWS::RDS::DBInstance
Conditions:
  UseDbSnapshot:
    !Not
      - !Equals
        - !Ref DBSnapshot
        - ''

Resources:

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet for database
      DBSubnetGroupName: !Sub '${AWS::StackName}-DbSubnetGroup'
      SubnetIds:
        - !Ref SubnetId1
        - !Ref SubnetId2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-subnet'
        - Key: Environment
          Value: !Ref ResourcePrefix

  DBInstance:
    DeletionPolicy: Snapshot # default
    UpdateReplacePolicy: Snapshot
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: !Ref DBAllocatedStorage
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      AvailabilityZone: !Ref AvailabilityZone
      BackupRetentionPeriod: !Ref DBBackupRetentionPeriod
      CopyTagsToSnapshot: true
      DBInstanceClass: !Ref DBInstanceClass
      DBName:
        !If
        - UseDbSnapshot
        - !Ref AWS::NoValue
        - !Ref DBName
      DBSnapshotIdentifier:
        !If
        - UseDbSnapshot
        - !Ref DBSnapshot
        - !Ref AWS::NoValue
      DBSubnetGroupName: !Ref DBSubnetGroup
      EnableCloudwatchLogsExports:
        - postgresql
        - upgrade
      EnablePerformanceInsights:
        !If
          - UseDbSnapshot
          - !Ref AWS::NoValue
          - true
      Engine: postgres
      EngineVersion: !Ref EngineVersion
      MasterUsername:
        !If
          - UseDbSnapshot
          - !Ref AWS::NoValue
          - postgres
      MasterUserPassword:
        !If
          - UseDbSnapshot
          - !Ref AWS::NoValue
          - !Ref DBMasterUserPassword
      MultiAZ: !Ref DBMultiAZ
      StorageEncrypted:
        !If
          - UseDbSnapshot
          - !Ref AWS::NoValue
          - true
      StorageType: gp2
      VPCSecurityGroups:
      - !Ref DBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-db-instance'
        - Key: Environment
          Value: !Ref ResourcePrefix

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to control traffic to/from the RDS instance
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - Description: Allow outbound https traffic for AWS Service endpoints
          CidrIp: 0.0.0.0/0
          ToPort: 443
          FromPort: 443
          IpProtocol: tcp
        - Description: Allow outbound NTP traffic
          CidrIp: 0.0.0.0/0
          ToPort: 123
          FromPort: 123
          IpProtocol: udp
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-db-sg'
        - Key: Environment
          Value: !Ref ResourcePrefix

Outputs:
  DBSecurityGroup:
    Description: The DB security group id
    Value: !GetAtt DBSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-DBSecurityGroup'
  DBAddress:
    Description: Database address
    Value: !GetAtt DBInstance.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-DBAddress'
  DBPort:
    Description: Database port
    Value: !GetAtt DBInstance.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-DBPort'


