
resource "aws_s3_bucket" "lambda_bucket" {
  bucket = "uads-dev-dockstore-lambda-bucket"

  tags = {
    Name        = "dockstore_lambda"
    Environment = "dev"
  }
}


data "archive_file" "lambda_cwl" {
  type = "zip"

  source_dir  = "${path.module}/../dockstore_lambda_develop/cwlpack"
  output_path = "${path.module}/cwlpack.zip"
}


data "archive_file" "lambda_github" {
  type = "zip"

  source_dir  = "${path.module}/../dockstore_lambda_develop/upsertGitHubTag"
  output_path = "${path.module}/upsertGitHubTag.zip"
}



resource "aws_s3_object" "lambda_cwl" {
  bucket = aws_s3_bucket.lambda_bucket.id

  key    = "cwlpack.zip"
  source = data.archive_file.lambda_cwl.output_path

  etag = filemd5(data.archive_file.lambda_cwl.output_path)
}

resource "aws_s3_object" "lambda_github" {
  bucket = aws_s3_bucket.lambda_bucket.id

  key    = "upsertGitHubTag.zip"
  source = data.archive_file.lambda_github.output_path

  etag = filemd5(data.archive_file.lambda_github.output_path)
}



resource "aws_lambda_function" "cwl" {
  function_name = "cwlpack"

  s3_bucket = aws_s3_bucket.lambda_bucket.id
  s3_key    = aws_s3_object.lambda_cwl.key

  runtime = "python3.8"
  handler = "app.lambda_handler"

  source_code_hash = data.archive_file.lambda_cwl.output_base64sha256

  role = aws_iam_role.dockstore_lambda_exec.arn
}

resource "aws_cloudwatch_log_group" "cwl" {
  name = "/aws/lambda/${aws_lambda_function.cwl.function_name}"

  retention_in_days = 30
}


resource "aws_lambda_function" "github" {
  function_name = "upsertGitHubTag"

  s3_bucket = aws_s3_bucket.lambda_bucket.id
  s3_key    = aws_s3_object.lambda_github.key

  runtime = "nodejs12.x"
  handler = "index.handler"

  source_code_hash = data.archive_file.lambda_github.output_base64sha256

  role = aws_iam_role.dockstore_lambda_exec.arn
}

resource "aws_cloudwatch_log_group" "hello_world" {
  name = "/aws/lambda/${aws_lambda_function.github.function_name}"

  retention_in_days = 30
}




resource "aws_iam_role" "dockstore_lambda_exec" {
  name = "dockstore_serverless_lambda"
  permissions_boundary = "arn:aws:iam::237868187491:policy/mcp-tenantOperator-AMI-APIG"
 
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Sid    = ""
      Principal = {
        Service = "lambda.amazonaws.com"
      }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "dockstore_lambda_policy" {
  role       = aws_iam_role.dockstore_lambda_exec.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}


