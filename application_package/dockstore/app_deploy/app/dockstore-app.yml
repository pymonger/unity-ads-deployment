# Commit: db4678a https://github.com/dockstore/dockstore-deploy/commits/db4678a
# A template to create AWS resources for running Dockstore
#
# PreInstall
# ----------
#
# * An S3 bucket will be created when s3.yml is ran prior to running this template. This bucket has the same name as the domain, except periods
#   are replaced with dashes. For example, if you are creating the stack for the domain ".dockstore.net", the S3 bucket is named "dev-dockstore-net".
#
#   You must manually create two folders in this S3 bucket:
#     1. bootstrap
#     2. grafana
#
#   The 'bootstrap' folder contains two items, which you must manually place into the folder:
#     1. database.tar.gz, that has one file in it, database.sql. This file is used to populate the database.
#     2. dockstore-github-private-key.tar.gz, with one file in it, dockstore-github-private-key.pem. This is the PEM file for GitHub apps.
#
#   The 'grafana' folder contains two items, which you must manually place into the folder:
#     1. dockstore-dashboard.json.mustache -> This is a Grafana dashboard json file that will be imported to Grafana to create a dashboard.
#     2. grafana_database_backup.db -> This is a Grafana database that is restored to the Grafana instance so previously created users still exist.
#        ** This file is OPTIONAL if you choose NOT to restore Grafana users with a Grafana database. If you don't want to restore users, make sure
#           that the RestoreGrafanaUsers parameter is set to 'false' when you are deploying this template.
#
# * Create an AWS keypair.
# * Ensure correct values are filled out in SSM Parameter Store
#
# Install
# -------
#
# 0. Run log-group.yml
# 2. Run core-<env>.yml
# 3. Run s3-<env>.yml
# 4. Run dockstore-<env>.yml. You will need the stack names from steps 2 and 3.
#
# Unlike other resources created as part of the stack, the log group, whose name is the domain name,
# is not deleted when the stack is deleted. Attempting to create the same log group a second time will cause that stack
# creation to fail.
#
# PostInstall
# -----------
#
# Add or modify the recordset for your domain to point to the load balancer created in this stack. Point
# it to the output value from runnig the stack.
#
# TODO
#
# 1. Should fire some sort of notification when update is performed or fails (Slack?).

---

Description: >
  Manages the Dockstore EC2 instances, as well as the lambda that fetches from SQS and invokes the web service.

Parameters:
  VpcId:
    Description: VPC ID for desired VPC
    Type: String
  SubnetId:
    Description: Subnet ID for desired VPC
    Type: String
  ResourcePrefix:
    Description: Env prefix (dev or test)
    Type: String
    Default: 'dev'
  #AppUrl:
  #  Description: Application URL
  #  Type: String
  AutoUpdate:
    Description: Whether the webservice and UI should update themselves nightly. Set to false for staging and prod!
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  LoadBalancerStack:
    Description: The name of the check url exists stack.
    Type: String
    MinLength: 1
  CheckUrlLambdaVersion:
    Description: The check url lambda version.
    Type: String
    Default: ""
  CWLParsingLambdaVersion:
    Description: The CWL parsing lambda version.
    Type: String
    Default: ""
  CoreStack:
    Description: The name of the core stack.
    Type: String
    MinLength: 1
  S3Stack:
    Description: The name of the S3 stack.
    Type: String
    MinLength: 1
  RdsStack:
    Description: The name of the RDS stack
    Type: String
    MinLength: 1
  ElasticsearchStack:
    Description: The name of the Elasticsearch stack
    Type: String
    MinLength: 1
  ElasticsearchMaxConcurrentSessions:
    Description: The max number of concurrent calls allowed for the search endpoint
    Type: Number
    Default: 150
    MinValue: 1
  ComposeSetupVersion:
    Description: Branch/tag of compose_setup to checkout
    Type: String
    Default: "1.12.0-rc.1"
    MinLength: 1
  DockstoreDeployVersion:
    Description: The name of a dockstore deploy git reference, used to find a deploy build in the deploy bucket
    Type: String
    Default: 1.12.3
  WebserviceTag:
    Description: The webservice quay.io tag on https://quay.io/repository/dockstore/dockstore-webservice?tab=tags. Only specify the tag, e.g., elop
    Type: String
    Default: "1.12.0"
  UiVersion:
    Description: The UI version; must be available via CloudFront
    Type: String
    MinLength: 1
    Default: "2.9.2-0210d0e"
  GalaxyPluginVersion:
    Description: Which version of galaxy to download from artifactory (e.g. 0.0.3). Leave blank if no version desired.
    Type: String
    Default: 0.0.7
  AvailabilityZone:
    Description: The AWS availability zone, e.g, us-east-1a
    Type: String
    AllowedValues:
      # Just a starting point; we could support all zones. And there is a better way to do this, see FN:GetAZs
      - us-west-2a
      - us-west-2b
      - us-west-2c
      - us-west-2d
    Default: us-west-2a
  InstanceType:
    Description: The EC2 instance type for Dockstore
    Type: String
    Default: t2.medium
  LoadBalancerIdleTimeout:
    Description: The idle timeout value, in seconds
    Type: Number
    Default: 600
    MinValue: 1
    MaxValue: 4000
  NextflowParsingLambdaVersion:
    Description: The nextflow parsing lambda version.
    Type: String
    Default: ""
  WDLParsingLambdaVersion:
    Description: The WDL parsing lambda version.
    Type: String
    Default: ""
  # Application level parameters with values in Parameter Store
  AuthorizerType:
    Description: The authorizer Dockstore should use -- inmemory, sam, or none
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/AuthorizerType

  #Unused params
  BdCatalystSevenBridgesImportUrl:
    Description: The import url for the Seven Bridges instance of BD Catalyst
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/BdCatalystSevenBridgesImportUrl
  BdCatalystTerraImportUrl:
    Description: The import url for the Terra instance of BD Catalyst
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/BdCatalystTerraImportUrl
  BitbucketClientId:
    Description: The Bitbucket client id
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/BitbucketClientId
  BitbucketClientSecret:
    Description: The Bitbucket client secret
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/BitbucketClientSecret
    NoEcho: true
  DiscourseCategoryId:
    Description: The Discourse category id
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/DiscourseCategoryId
  DiscourseKey:
    Description: The Discourse key
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/DiscourseKey
    NoEcho: true
  DiscourseUrl:
    Description: The Discourse url
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/DiscourseUrl
  DocumentationUrl:
    Description: The documentation  url
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/DocumentationUrl
  ExternalGoogleClientPrefix:
    Description: The external Google audience that Dockstore will accept tokens from
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/ExternalGoogleClientPrefix



  #Used
  #Here domain name is just URL - would be nice to eventually switch to domain names 
  DomainName:     
    Description: The domain of this Dockstore instance, e.g., dockstore.org, staging.dockstore.org, .dockstore.net
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/DomainName
  FeaturedContentUrl: 
    Description: The CloudFront content to populate the featured collection and organization
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/FeaturedContentURL
  FeaturedNewsUrl: 
    Description: The CloudFront content to populate news and events
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/FeaturedNewsURL    
  GitHubAppId:
    Description: The GitHub App id
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/GitHubAppId
  GitHubAppName:
    Description: The GitHub App name
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/GitHubAppName
  GitHubClientId:
    Description: The GitHub Client id
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/GitHubClientId
  GitHubClientSecret:
    Description: The GitHub Client secret
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/GitHubClientSecret
    NoEcho: true
  DBDockstoreUserPassword:
    Description: The password for the Postgres dockstore user
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/DBDockstorePassword
    NoEcho: true
  DBPostgresPassword:
    Description: The Postgres user password
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/DBPostgresPassword
    NoEcho: true

  #Unused params
  GitLabClientId:
    Description: The GitLab Client id
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/GitLabClientId
  GitLabClientSecret:
    Description: The GitLab Client secret
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/GitLabClientSecret
    NoEcho: true
  GoogleClientId:
    Description: The Google Client secret
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/GoogleClientId
  GoogleClientSecret:
    Description: The Google Client secret
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/GoogleClientSecret
    NoEcho: true
  OrcidClientId:
    Description: The ORCID client id
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/OrcidClientId
  OrcidClientSecret:
    Description: The ORCID client secret
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/OrcidClientSecret
    NoEcho: true
  OrcidUrl:
    Description: The ORCID url
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/OrcidUrl
  OrcidScope:
    Description: The ORCID scope
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/OrcidScope
  QuayClientId:
    Description: The Quay Client id
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/QuayClientId
  QuayClientSecret:
    Description: The Quay Client secret
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/QuayClientSecret
    NoEcho: true
  SamPath:
    Description: SAM base path
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/SamPath
  SlackMediumPrioritySNSTopicName:
    Description: Name of Amazon SNS Topic for sending medium priority alerts to a slack channel
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/SlackMediumPrioritySNSTopicName
  TagManagerId:
    Description: The Google Tag Manager id
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/TagManagerId
  TerraImportUrl:
    Description: The Terra Import Url
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/TerraImportUrl
  ToolTesterBucketName:
    Description: The Tool Tester bucket name
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/ToolTesterBucketName
  ZenodoClientId:
    Description: The Zenodo Client id
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/ZenodoClientId
  ZenodoClientSecret:
    Description: The Zenodo Client secret
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/ZenodoClientSecret
  #  NoEcho: true
  ZenodoUrl:
    Description: The Zenodo url
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/ZenodoUrl

#System Level Parameters from Parameter Store
#  CertificateArn:
#    Description: The AWS Certificate Manager ARN
#    Type: AWS::SSM::Parameter::Value<String>
#    Default: /DeploymentConfig/dev/LoadBalancerCertificateArn

Mappings:
  Regions:
    us-west-1:
      ubuntu20ami: 'ami-043738bfa891187cc' # Ubuntu Focal 20.04-20210315
    us-west-2:
      ubuntu20ami: 'ami-043738bfa891187cc' # Ubuntu Focal 20.04-20210315

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Configure the Dockstore Software Versions"
        Parameters:
          - AutoUpdate
          - ComposeSetupVersion
          - WebserviceTag
          - UiVersion
          - GalaxyPluginVersion
      - Label:
          default: "Other stacks"
        Parameters:
          - CoreStack
          - S3Stack
          - RdsStack
          - LoadBalancerStack
      - Label:
          default: "Provide EC2 Instance Details"
        Parameters:
          - InstanceType
          - AvailabilityZone
      - Label:
          default: "Load Balancer Settings"
        Parameters:
          - LoadBalancerIdleTimeout
      - Label:
          default: "SSM Parameter Store Key Names that should typically not be changed"
        Parameters:
          - BdCatalystSevenBridgesImportUrl
          - BdCatalystTerraImportUrl
          - BitbucketClientId
          - BitbucketClientSecret
          - CertificateArn
          - DiscourseCategoryId
          - DiscourseKey
          - DiscourseUrl
          - DocumentationUrl
          - DomainName
          - GitHubAppId
          - GitHubAppName
          - GitHubClientId
          - GitHubClientSecret
          - GitLabClientId
          - GitLabClientSecret
          - GoogleClientId
          - GoogleClientSecret
          - QuayClientId
          - QuayClientSecret
          - TagManagerId
          - TerraImportUrl
          - ZenodoClientId
          - ZenodoClientSecret
          - ZenodoUrl

Resources:

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: 
       - "DockstoreInstanceRole" 


  DockstoreInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup_dockstore:
           - install_dockstore
           - add_cron_job
          setup_collectd:
           - move_files
          cw_agent_default:
           - setup_cfn_hup
           - config_cw_agent
           - restart_cw_agent
          cw_agent_update_environment:
           - config_cw_agent
           - restart_cw_agent
          harden_server:
           - config_sysctl
          #- empty_securetty
        move_files:
          files:
              "/etc/collectd/collectd.conf":
                content: !Sub |
                  LoadPlugin curl_json
                  LoadPlugin "logfile"
                  LoadPlugin network
                  TypesDB "/usr/share/collectd/types.db"
                  <Plugin "logfile">
                    LogLevel "info"
                    File "/var/log/collectd.log"
                    Timestamp true
                  </Plugin>
                  <Plugin curl_json>
                    <URL "http://localhost:8081/metrics">
                      Instance "jvm"
                      Host "Dockstore"
                      <Key "gauges/jvm.memory.heap.usage/value">
                        Type "percent"
                      </Key>
                      <Key "gauges/io.dropwizard.db.ManagedPooledDataSource.hibernate.active/value">
                        Type "gauge"
                      </Key>
                      <Key "gauges/io.dropwizard.db.ManagedPooledDataSource.hibernate.idle/value">
                        Type "gauge"
                      </Key>
                    </URL>
                  </Plugin>
                  <Plugin network>
                      Server "127.0.0.1" "25826"
                  </Plugin>
                mode: "644"
                owner: root
                group: root
          commands:
            01_run_collectd:
              command: sudo service collectd restart
        install_dockstore:
          packages:
            apt:
              docker-ce: ["5:20.10.3~3-0~ubuntu-focal"]
              ruby-mustache: ["1.0.2-1"]
              jq: []
              collectd-core: []
              libyajl2: []
              libyajl-dev: []
          groups:
            docker: {}
          users:
            ubuntu:
              groups:
                - docker
          sources:
            "/home/ubuntu/compose_setup": !Sub 'https://github.com/dockstore/compose_setup/tarball/${ComposeSetupVersion}'
            #"/home/ubuntu/github-key": !Join
            #  - ''
            #  - - 'https://'
            #    - Fn::ImportValue: !Sub '${S3Stack}-S3BucketName'
            #    - '.s3.'
            #    - !Ref 'AWS::Region'
            #    - '.amazonaws.com'
            #    - '/bootstrap/dockstore-github-private-key.pem.tar.gz'
          files:
            "/home/ubuntu/compose_setup/dockstore_launcher_config/compose.config":
              content: !Sub
                - |
                  {
                  "AUTHORIZER_TYPE":"${AuthorizerType}",
                  "COMPOSE_SETUP_VERSION":"${ComposeSetupVersion}",
                  "DEPLOY_VERSION":"1.12.3",
                  "DATABASE_DOMAIN":"${DatabaseDomain}",
                  "DATABASE_GENERATED" : true,
                  "DOCKSTORE_DBPASSWORD":"${DBDockstoreUserPassword}",
                  "DOCKSTORE_VERSION":"${WebserviceTag}",
                  "DOMAIN_NAME":"${AppUrl}",
                  "GITHUB_APP_ID":"${GitHubAppId}",
                  "GITHUB_APP_NAME":"${GitHubAppName}",
                  "GITHUB_APP_PRIVATE_KEY_FILE":"/home/ubuntu/github-key/dockstore-github-private-key.pem",
                  "GITHUB_CLIENT2_ID":"${GitHubClientId}",
                  "GITHUB_CLIENT2_SECRET":"${GitHubClientSecret}",
                  "HTTPS": false,
                  "LOGSTASH":false,
                  "POSTGRES_DBPASSWORD":"${DBPostgresPassword}",
                  "PRODUCTION": false,
                  "PUBLIC_LAUNCHER_IP_ADDRESS":"",
                  "TAG_MANAGER_ID":"${TagManagerId}",
                  "TOOLTESTER_BUCKET_NAME":"${ToolTesterBucketName}",
                  "UI2_HASH":"${UiVersion}",
                  "BD_CATALYST_SEVEN_BRIDGES_IMPORT_URL":"${BdCatalystSevenBridgesImportUrl}",
                  "BD_CATALYST_TERRA_IMPORT_URL":"${BdCatalystTerraImportUrl}",
                  "BITBUCKET_CLIENT_ID":"${BitbucketClientId}",
                  "BITBUCKET_CLIENT_SECRET":"${BitbucketClientSecret}",
                  "CHECK_URL_EXISTS_ENDPOINT":"",
                  "CHECK_URL_LAMBDA_VERSION":"${CheckUrlLambdaVersion}",
                  "CWL_PARSING_LAMBDA_VERSION":"${CWLParsingLambdaVersion}",
                  "DISCOURSE_CATEGORY_ID": "${DiscourseCategoryId}",
                  "DISCOURSE_KEY":"${DiscourseKey}",
                  "DISCOURSE_URL":"${DiscourseUrl}",
                  "DOCUMENTATION_URL":"${DocumentationUrl}",
                  "ELASTICSEARCH_DOMAIN":"${ElasticsearchDomain}",
                  "ELASTICSEARCH_PROTOCOL":"http",
                  "ELASTICSEARCH_PORT":"80",
                  "ELASTICSEARCH_USER":"",
                  "ELASTICSEARCH_PASSWORD":"${ElasticsearchDomain}",
                  "ELASTICSEARCH_MAX_CONCURRENT_SESSIONS":"${ElasticsearchMaxConcurrentSessions}",
                  "EXTERNAL_GOOGLE_CLIENT_PREFIX1":"${ExternalGoogleClientPrefix}",
                  "FEATURED_CONTENT_URL": "${FeaturedContentUrl}",
                  "FEATURED_NEWS_URL": "${FeaturedNewsUrl}",
                  "GALAXY_PLUGIN_VERSION":"${GalaxyPluginVersion}",
                  "GITLAB_CLIENT_ID":"${GitLabClientId}",
                  "GITLAB_CLIENT_SECRET":"${GitLabClientSecret}",
                  "GOOGLE_CLIENT_ID":"${GoogleClientId}",
                  "GOOGLE_CLIENT_SECRET":"${GoogleClientSecret}",
                  "NEXTFLOW_PARSING_LAMBDA_VERSION":"${NextflowParsingLambdaVersion}",
                  "ORCID_CLIENT_ID":"${OrcidClientId}",
                  "ORCID_CLIENT_SECRET":"${OrcidClientSecret}",
                  "ORCID_URL":"${OrcidUrl}",
                  "ORCID_SCOPE":"${OrcidScope}",
                  "QUAY_CLIENT_ID":"${QuayClientId}",
                  "QUAY_CLIENT_SECRET":"${QuayClientSecret}",
                  "SAM_PATH":"${SamPath}",
                  "TERRA_IMPORT_URL":"${TerraImportUrl}",
                  "WDL_PARSING_LAMBDA_VERSION":"${WDLParsingLambdaVersion}",
                  "ZENODO_CLIENT_ID": "${ZenodoClientId}",
                  "ZENODO_CLIENT_SECRET": "${ZenodoClientSecret}",
                  "ZENODO_URL": "${ZenodoUrl}"
                  }
                - DatabaseDomain:
                    Fn::ImportValue:
                     !Sub "${RdsStack}-DBAddress"
                  ElasticsearchDomain:
                    Fn::ImportValue:
                      !Sub "${ElasticsearchStack}-ESDomainEndpoint"
                  AppUrl:
                    !Join
                     - ''
                     - - 'http://'
                       - Fn::ImportValue: !Sub "${LoadBalancerStack}-LBDNSName"
                       - ':9998/'
          commands:
            # Commands are executed alphabetically
            "01_make_dir":
              command: mkdir github-key
              cwd: "/home/ubuntu"
            "02_aws_cp":
              command: 
               !Join 
                - ""
                - - "aws s3 cp s3://"
                  - Fn::ImportValue: !Sub "${S3Stack}-S3BucketName"
                  - "/bootstrap/dockstore-github-private-key.pem.tar.gz ./github-key/"
              cwd: "/home/ubuntu/"
            "03_untar":
              command: tar -xvf dockstore-github-private-key.pem.tar.gz
              cwd: "/home/ubuntu/github-key/"
            "04_change_owner":
              command: chown -R ubuntu:ubuntu compose_setup github-key
              cwd: "/home/ubuntu/"
            "05_build":
              command: sudo -u ubuntu bash install_bootstrap --script
              cwd: "/home/ubuntu/compose_setup/"
            "06_aws_cp_2":
              command:
               !Join 
                - ""
                - - "aws s3 cp s3://"
                  - Fn::ImportValue: !Sub "${S3Stack}-S3BucketName"
                  - "/bootstrap/default.nginx_http.conf ./config/"
              cwd: "/home/ubuntu/compose_setup/"
            "07_aws_cp_3":
              command:
               !Join
                - ""
                - - "aws s3 cp s3://"
                  - Fn::ImportValue: !Sub "${S3Stack}-S3BucketName"
                  - "/bootstrap/default.nginx_http.security.conf ./config/"
              cwd: "/home/ubuntu/compose_setup/"
            "08_aws_cp_3":
              command:
               !Join
                - ""
                - - "aws s3 cp s3://"
                  - Fn::ImportValue: !Sub "${S3Stack}-S3BucketName"
                  - "/bootstrap/sed_command.sh ./"
              cwd: "/home/ubuntu/compose_setup/"
            "09_run_script":
              command: bash ./sed_command.sh
              cwd: "/home/ubuntu/compose_setup/"
            "10_sed_2":
              command: 
               !Join
               - ""
               - - "sed -i 's/uads-test-dockstore-deploy-lb-1762603872.us-west-2.elb.amazonaws.com/"
                 - Fn::ImportValue: !Sub "${LoadBalancerStack}-LBDNSName"
                 - "/g' config/default.nginx_http.*"
              cwd: "/home/ubuntu/compose_setup/"
            "11_sed_3":
               command: sed -i 's/http:\/\/http:\/\//http:\/\//g' config/*
               cwd: "/home/ubuntu/compose_setup/"
            "12_sed_4":
               command: sed -i 's/:443//g' config/web.yml
               cwd: "/home/ubuntu/compose_setup/"
            "12_sed_4":
               command: 
                 !Join
                  - ""
                  - - "sed -i 's/ gitHubRedirectPath: .*/ gitHubRedirectPath: http://'"
                    - Fn::ImportValue: !Sub "${LoadBalancerStack}-LBDNSName"
                    - ":9998 config/web.yml"
               cwd: "/home/ubuntu/compose_setup/"
            "14_build_dock":
              command: sudo -u ubuntu LOG_GROUP_NAME=awsagent-update.log docker-compose -f docker-compose.yml -f docker-compose.dev.yml build
              cwd: "/home/ubuntu/compose_setup/"
            "15_recreate":
              cwd: "/home/ubuntu/compose_setup/"
              command: sudo -u ubuntu LOG_GROUP_NAME=awsagent-update.log nohup docker-compose up --force-recreate --remove-orphans -d &
        add_cron_job:
          files:
            "/home/ubuntu/updateDockstore.sh":
              content: !Sub |
                #!/bin/bash

                # 1. Determines the latest UI version on CloudFront
                # 2. Updates dockstore_launcher_config/compose.config with the latest UI version
                # 3. Brings down docker-compose
                # 4. Deletes the elop web service image, because that is a "floating tag"
                # 5. Brings up docker-compose, which should pull the latest web service and point
                #    to the latest UI.

                # TODO
                #
                # 1. Should be smart enough not to update if nothing has changed
                # 2. Shouldn't assume elop branch, e.g., if I have an instance for my own branch, this will switch it develop

                cd /home/ubuntu/compose_setup

                # A global variable given that you can't return strings from functions in BASH
                UI_VERSION=

                # Find the latest commit on elop that is on CDN (latest commit may not yet be on CDN)
                getLatestUiOnDevelop () {
                    UI_SHA=$(curl -s https://api.github.com/repos/dockstore/dockstore-ui2/commits?sha=elop | jq -c -r  '.[] | .sha' | cut -c -7)
                    for sha in $UI_SHA
                    do
                        $(curl -sf https://gui.dockstore.org/elop-$sha/index.html > /test/null)
                        if [ $? -eq 0 ]
                        then
                           UI_VERSION="elop-$sha"
                           return 0
                        fi
                    done
                    return 1
                }


                getLatestUiOnDevelop
                NEW_UI2_HASH="\"UI2_HASH\":\"$UI_VERSION\""
                OLD_UI2_HASH="\"UI2_HASH\":\".*\""
                sed -i "s/$OLD_UI2_HASH/$NEW_UI2_HASH/" dockstore_launcher_config/compose.config

                LOG_GROUP_NAME=awsagent-update.log docker-compose down

                # Because elop is a floating tag, remove the local image
                docker image rm quay.io/dockstore/dockstore-webservice:${WebserviceTag}

                # Regenerate config files from templates
                bash install_bootstrap --script

                # Bring it back up
                LOG_GROUP_NAME=awsagent-update.log nohup docker-compose up --force-recreate --remove-orphans &
              mode: "774"
              owner: ubuntu
              group: ubuntu
            "/tmp/dockstoreCronTab":
              # 1. Empty line in the content on purpose; some crontab require a new line at the end
              # 2. 6 is 3am eastern, midnight pacific
              # 3. Probably not the right place for the logs
              content: |
                PATH=/usr/bin:/bin::/usr/local/bin
                0 6 * * * /home/ubuntu/updateDockstore.sh >> /home/ubuntu/logs/updateDockstore.cron.log 2>&1

              owner: ubuntu
              group: ubuntu
              mode: "644"
            "/tmp/addUpdateDockstoreCronTab.sh":
                content: !Sub |
                  #!/bin/bash
                  set -o errexit
                  set -o nounset
                  set -o pipefail
                  if [ "true" == "${AutoUpdate}" ]; then
                    sudo -u ubuntu crontab /tmp/dockstoreCronTab
                  else
                    # Remove the temptation to run this file
                    rm /home/ubuntu/updateDockstore.sh
                  fi
                mode: "774"
                owner: ubuntu
                group: ubuntu
          commands:
            # Commands are executed alphabetically
            "01_create_logs_directory":
              command: sudo -u ubuntu mkdir logs
              cwd: "/home/ubuntu"
            "02_add_cron_job":
              command: /tmp/addUpdateDockstoreCronTab.sh
        config_cw_agent:
          files:
            "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json":
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 300,
                    "run_as_user": "root"
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/awsagent-update.log",
                            "log_group_name": "awsagent-update.log",
                            "log_stream_name": "${DomainName}-${AWS::StackName}"
                          }
                        ]
                      }
                    }
                  },
                  "metrics": {
                    "append_dimensions": {
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}",
                      "Environment": "${DomainName}"
                    },
                    "metrics_collected": {
                      "collectd":{
                        "name_prefix":"collectd_metrics_",
                        "metrics_aggregation_interval":120,
                        "collectd_security_level": "none",
                        "service_address": "udp://127.0.0.1:25826"
                      },
                      "disk": {
                        "measurement": [
                          {
                            "name": "free",
                            "unit": "Gigabytes"
                          },
                          "used_percent"
                        ],
                        "metrics_collection_interval": 300,
                        "ignore_file_system_types": [
                          "tmpfs",
                          "overlay",
                          "squashfs",
                          "tmpfs"
                        ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "diskio": {
                        "measurement": [
                          "io_time"
                        ],
                        "metrics_collection_interval": 600,
                        "resources": [
                          "xvda",
                          "xvda1"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ],
                        "metrics_collection_interval": 600
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        restart_cw_agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        setup_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DockstoreInstance.Metadata.AWS::CloudFormation::Init.config_cw_agent
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource DockstoreInstance --region ${AWS::Region} --configsets cw_agent_update_environment
                runas=root
              mode: '000400'
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01_enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02_start_cfn_hup:
              command: systemctl start cfn-hup.service
        config_sysctl:
          commands:
            01_config_sysctl_all_disable_redirects:
              command: echo "net.ipv4.conf.all.accept_redirects = 0" >> /etc/sysctl.conf
            02_config_sysctl_default_disable_redirects:
              command: echo "net.ipv4.conf.default.accept_redirects = 0" >> /etc/sysctl.conf
            03_config_sysctl_all_disable_secure_redirects:
              command: echo "net.ipv4.conf.all.secure_redirects = 0" >> /etc/sysctl.conf
            04_config_sysctl_default_disable_secure_redirects:
              command: echo "net.ipv4.conf.default.secure_redirects = 0" >> /etc/sysctl.conf
            05_config_sysctl_syncookies:
              command: echo "net.ipv4.tcp_syncookies = 1" >> /etc/sysctl.conf
            06_config_sysctl_reload:
              command: sysctl -p
        #empty_securetty:
        #  commands:
        #    # This will restrict root access to single user mode (does not affect SSH)
        #    01_empty_securetty_doit:
        #      command: cat /test/null > /etc/securetty
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets:
            Fn::ImportValue: !Sub '${S3Stack}-S3BucketName'
          roleName: DockstoreInstanceRole
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      ImageId: !FindInMap
        - Regions
        - !Ref 'AWS::Region'
        - ubuntu20ami
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 20
            # Setting this flag encypts the volume the next time it is created
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-block-template.html#cfn-ec2-blockdev-template-encrypted
            # We could also set the account settings to encrypt any EBS Volume
            # by default https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default
            Encrypted: true
      SecurityGroupIds:
        - !Ref DockstoreServerSecurityGroup
      SubnetId: !Ref SubnetId 
      Monitoring: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-instance'
        - Key: Environment
          Value: ''
        - Key: Type
          Value: "Dockstore"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Update and upgrade software before anything else
          # (This does not handle the case of a reboot being required)
          DEBIAN_PRIORITY=critical DEBIAN_FRONTEND=noninteractive apt-get -qq -y update
          # Use the --with-new-pkgs flag to force aws-linux and friends to update as well
          #DEBIAN_FRONTEND=noninteractive apt-get -qq -y --with-new-pkgs upgrade
          DEBIAN_PRIORITY=critical DEBIAN_FRONTEND=noninteractive apt-get -qy -o "Dpkg::Options::=--force-confdef" -o "Dpkg::Options::=--force-confold" upgrade
          # Disable all services that automatically update software
          systemctl disable apt-daily.timer
          systemctl stop apt-daily.timer
          systemctl mask apt-daily.service
          systemctl disable apt-daily-upgrade.timer
          systemctl stop apt-daily-upgrade.timer
          systemctl mask apt-daily-upgrade.service
          systemctl disable packagekit
          systemctl stop packagekit
          systemctl mask packagekit.service
          systemctl daemon-reload
          # Download CloudWatch Agent
          # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-commandline-fleet.html
          wget --quiet https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/1.247347.6b250880/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
          dpkg -i -E /tmp/amazon-cloudwatch-agent.deb

          # Install python3 and pip3
          apt-get -qq -y install python3-pip

          # Install cfn-bootstrap
          wget --quiet https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-2.0-6.tar.gz -O /root/aws-cfn-bootstrap.tar.gz 
          tar xzf /root/aws-cfn-bootstrap.tar.gz -C /root
          pip3 install /root/aws-cfn-bootstrap.tar.gz

          # Set up cfn-hup
          ln -s /root/aws-cfn-bootstrap-2.0/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          chmod 700 /etc/init.d/cfn-hup

          # Set up docker and docker-compose
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          apt-get update
          curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod ugo+x /usr/local/bin/docker-compose
          # Up the vm.max_map_count for ElasticSearch
          echo "vm.max_map_count=262144" >> /etc/sysctl.conf
          sed -i 's/.*ipv6.*//g' /etc/sysctl.conf
          # Reads from /etc/sysctl.conf
          sysctl -p
          # Install aws cli here, so it will be available for SSM associations
          sudo -u ubuntu curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          apt-get -y install unzip net-tools

          unzip -q /tmp/awscliv2.zip -d /tmp
          /tmp/aws/install
          rm -f /tmp/awscliv2.zip
          rm -fr /tmp/aws
          # Set hostname (persistent)
          echo -n "Dockstore--${AWS::StackName}" > /etc/hostname
          # Set hostname (does not require reboot)
          hostnamectl set-hostname "Dockstore--${AWS::StackName}"
          # Set hostname for interactive shells
          hostnamectl set-hostname "Dockstore--${AWS::StackName}" --pretty
          echo "PermitRootLogin no" >> /etc/ssh/sshd_config
          systemctl restart ssh

          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource DockstoreInstance --configsets setup_dockstore,setup_collectd,cw_agent_default,harden_server --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DockstoreInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M


  # our EC2 security group
  DockstoreServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable TCP access from LoadBalancer to ports 80
      SecurityGroupIngress:
        - Description: Allow inbound traffic from the load balancer to the EC2 instance on port 80
          SourceSecurityGroupId: 
           Fn::ImportValue: !Sub "${LoadBalancerStack}-LBSecurityGroup"
          ToPort: 80
          FromPort: 80
          IpProtocol: tcp
        - Description: Allow inbound traffic from the load balancer to on port 9998
          SourceSecurityGroupId: 
           Fn::ImportValue: !Sub "${LoadBalancerStack}-LBSecurityGroup"
          ToPort: 9998
          FromPort: 9998
          IpProtocol: tcp
        - Description: Allow inbound traffic from Load Balancer on port 9999
          SourceSecurityGroupId: 
           Fn::ImportValue: !Sub "${LoadBalancerStack}-LBSecurityGroup"
          ToPort: 9999
          FromPort: 9999
          IpProtocol: tcp
        - Description: Allow inbound traffic from Load Balancer on port 443
          SourceSecurityGroupId: 
           Fn::ImportValue: !Sub "${LoadBalancerStack}-LBSecurityGroup"
          ToPort: 443
          FromPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - Description: Allow outbound http traffic (for aptitude) - see SEAB-3387
          CidrIp: 0.0.0.0/0
          ToPort: 80
          FromPort: 80
          IpProtocol: tcp
        - Description: Allow outbound https traffic for Webservice functionality and AWS Service endpoints
          CidrIp: 0.0.0.0/0
          ToPort: 443
          FromPort: 443
          IpProtocol: tcp
        - Description: Allow outbound https traffic for Webservice functionality and AWS Service endpoints
          CidrIp: 0.0.0.0/0
          ToPort: 9999
          FromPort: 9999
          IpProtocol: tcp
        - Description: Allow outbound https traffic for Webservice functionality and AWS Service endpoints
          CidrIp: 0.0.0.0/0
          ToPort: 9998
          FromPort: 9998
          IpProtocol: tcp
        - Description: Allow outbound traffic to PostgreSQL
          DestinationSecurityGroupId:
            Fn::ImportValue: !Sub '${RdsStack}-DBSecurityGroup'
          ToPort: 5432
          FromPort: 5432
          IpProtocol: tcp
        - Description: Allow outbound NTP traffic
          CidrIp: 0.0.0.0/0
          ToPort: 123
          FromPort: 123
          IpProtocol: udp
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-sg'
        - Key: Environment
          Value: !Ref ResourcePrefix

  # Modify the RDS security group to add ingress rules allowing traffic from Dockstore instance SG
  DockstoreRdsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress rule to allow traffic from Dockstore instance SG to RDS SG
      FromPort: 5432
      ToPort: 5432
      IpProtocol: tcp
      GroupId:
        Fn::ImportValue: !Sub '${RdsStack}-DBSecurityGroup'
      SourceSecurityGroupId: !Ref DockstoreServerSecurityGroup
 
  #Modify the ES security group to add ingress rules allowing traffic from Dockstore instance SG
  DockstoreElasticsearchSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress rule to allow traffic from Dockstore instance SG to Elasticsearch SG
      FromPort: 80
      ToPort: 80
      IpProtocol: tcp
      GroupId:
        Fn::ImportValue: !Sub '${ElasticsearchStack}-ESSecurityGroup'
      SourceSecurityGroupId: !Ref DockstoreServerSecurityGroup

  # Target group in front of the Dockstore instance, allows it to receive traffic from the load balancer via port 80
  TargetGroupPort80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      # Careful, name can be a max of 32 characters! One long stack name: Dockstore-1-11-0-beta-1
      Name: !Sub '${AWS::StackName}-80'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId 
      Targets:
        - Id: !Ref DockstoreInstance
          Port: 80

  # Target group in front of the Dockstore instance, allows it to receive traffic from the load balancer via port 80
  TargetGroupPort8080:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      # Careful, name can be a max of 32 characters! One long stack name: Dockstore-1-11-0-beta-1
      Name: !Sub '${AWS::StackName}-8080'
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcId 
      Targets:
        - Id: !Ref DockstoreInstance
          Port: 8080


  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn:  
       Fn::ImportValue: !Sub "${LoadBalancerStack}-LoadBalancer"
      WebACLArn:
        Fn::ImportValue:
          !Sub '${CoreStack}-WebACLArn'

  #Listen on port 9998 and redirect to port 80 on EC2
  LbPort9998Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      #Certificates:
      #  - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupPort80
      LoadBalancerArn: 
       Fn::ImportValue: !Sub "${LoadBalancerStack}-LoadBalancer"
      Port: 9998
      Protocol: HTTP
      #SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
 
  #Listen on port 9999 and redirect to port 8080 on EC2
  LbPort9999Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      #Certificates:
      #  - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupPort8080
      LoadBalancerArn: 
       Fn::ImportValue: !Sub "${LoadBalancerStack}-LoadBalancer"
      Port: 9999
      Protocol: HTTP
      #SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06

  #Listen on port 80 and redirect to port 80 on EC2
  LbPort80Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      #Certificates:
      #  - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupPort80
      LoadBalancerArn: 
       Fn::ImportValue: !Sub "${LoadBalancerStack}-LoadBalancer"
      Port: 80
      Protocol: HTTP
      #SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
 

