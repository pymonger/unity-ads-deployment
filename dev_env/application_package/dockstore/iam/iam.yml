# Commit: db4678a https://github.com/dockstore/dockstore-deploy/commits/db4678a
Description: >
  IAM policies and groups

Resources:
  #Had to manually create Policies and Roles commented out due to requirement of security boundary - Dont really need Group
  #EnvironmentTagBasedSsmAccess:
  #  Type: AWS::IAM::Group
  #  Properties:
  #    GroupName: EnvironmentTagBasedSsmAccess
 
  EnvironmentTagSsmAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Full SSM and EC2 access to users whose Environment tag contains EC2 Environment tag
      ManagedPolicyName: TagBasedSsmAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ssm:StartSession"
              - "ec2:CreateTags"
              - "ec2:RunInstances"
              - "ec2:StartInstances"
              - "ec2:StopInstances"
              - "ec2:Describe*"
            Resource: !Sub "arn:aws:ec2:*:${AWS::AccountId}:instance/*"
            # Example
            # User environment tag: "staging prod"
            # EC2 Environment tag: "staging"
            # Look for "staging" in "staging prod"
            Condition:
              StringLike:
                "aws:PrincipalTag/Environment": "*${aws:ResourceTag/Environment}*"
          - Effect: Allow
            Action:
              - "ssm:TerminateSession"
              - "ssm:ResumeSession"
            Resource: !Join ['', [!Sub "arn:aws:ssm:*:${AWS::AccountId}:session/", "${aws:username}-*"]]
          - Effect: Allow
            Action:
              - "ssm:*"
            Resource: !Sub "arn:aws:ssm:*:${AWS::AccountId}:parameter/*"
            Condition:
              StringLike:
                "aws:PrincipalTag/Environment": "*${aws:ResourceTag/Environment}*"

  DockstoreCloudFormationRole:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow 
           Action:
             - "sts:AssumeRole"  
           Principal:
               Service:
                -  cloudformation.amazonaws.com
        Path: /
        PermissionsBoundary: "arn:aws:iam::237868187491:policy/mcp-tenantOperator-AMI-APIG"      
        ManagedPolicyArns:
            - !Ref IAMFullAccess
            - !Ref AmazonS3FullAccess
            - !Ref AWSCloudFormationFullAccess
 

  ModifyInstanceMetaDataOptionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: uads-dev-meta-role
      AssumeRolePolicyDocument:
       Version: "2012-10-17"
       Statement:
         - Effect: Allow
           Principal:
              Service:
                - ssm.amazonaws.com
           Action:
              - 'sts:AssumeRole'
      Path: /
      PermissionsBoundary: "arn:aws:iam::237868187491:policy/mcp-tenantOperator-AMI-APIG"
      Policies:
        - PolicyName: ModifyInstanceMetaDataOptions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:ModifyInstanceMetadataOptions'
                  - 'ec2:DescribeInstances'
                Resource: '*'

  DockstoreDeployerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: SNS Publish and s3 reading permissions needed by the deployer
      ManagedPolicyName: DockstoreDeployerPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
            Resource: '*'
          - Effect: Allow
            Action:
              - "s3:ListBucket"
              - "s3:GetObject"
            # The deployer used to have the now deprecated AWS arn:aws:iam::aws:policy/AWSLambdaFullAccess policy. That policy
            # gave "s3:*" permissions. That's how the deployer was able to deploy lambdas before.
            # These buckets are in different accounts, but it's easier and still safe to just list all lambda buckets
            Resource:
              #- 'arn:aws:s3:::uads-dev-dockstore.lambda'
              #- 'arn:aws:s3:::dockstore.lambda/*'
              - 'arn:aws:s3:::uads-dev-dockstore.lambda'
              - 'arn:aws:s3:::uads-dev-dockstore.lambda/*'
              - 'arn:aws:s3:::uads-test-dockstore.lambda'
              - 'arn:aws:s3:::uads-test-dockstore.lambda/*'
              #- 'arn:aws:s3:::qa-dockstore.lambda'
              #- 'arn:aws:s3:::qa-dockstore.lambda/*'
              #- 'arn:aws:s3:::dockstore.lambda.us-west'
              #- 'arn:aws:s3:::dockstore.lambda.us-west/*'
              - "arn:aws:s3:::uads-dev-dockstore-deploy/*"
              - "arn:aws:s3:::uads-dev-dockstore-deploy"
              - "arn:aws:s3:::uads-test-dockstore-deploy/*"
              - "arn:aws:s3:::uads-test-dockstore-deploy"
              #- "arn:aws:s3:::prod-dockstore-deploy/*"
              #- "arn:aws:s3:::prod-dockstore-deploy"
          - Effect: Allow
            Action:
                - 'sqs:CreateQueue'
                - 'sqs:DeleteQueue'
                - 'sqs:GetQueueAttributes'
                - 'sqs:SetQueueAttributes'
                - 'sqs:TagQueue'
                - 'sqs:UntagQueue'
            Resource:
              - !Sub 'arn:aws:sqs:*:${AWS::AccountId}:upsertGithubPush*'
              - !Sub 'arn:aws:sqs:*:${AWS::AccountId}:SecurityHubFindingsSuppression*'
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:ListObject'
            Resource:
                - 'arn:aws:s3:::cdktoolkit-stagingbucket-*/*'
                - 'arn:aws:s3:::cdktoolkit-stagingbucket-*'


