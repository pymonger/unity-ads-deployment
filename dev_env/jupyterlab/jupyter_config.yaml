# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://jupyterhub.github.io/helm-chart/

singleuser:
  defaultUrl: "/lab"
  extraEnv:
    JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"
  # Defines the default image
  image:
    name: jupyter/base-notebook
    tag: latest
  profileList:
    - display_name: "Jupyter - Minimal environment"
      description: "To avoid too much bells and whistles: Python."
      default: true
    - display_name: "Jupyter - Datascience environment"
      description: "If you want the additional bells and whistles: Python, R, and Julia."
      kubespawner_override:
        image: jupyter/datascience-notebook:latest
    - display_name: "Jupyter - Spark environment"
      description: "The Jupyter Stacks spark image!"
      kubespawner_override:
        image: jupyter/all-spark-notebook:latest
    - display_name: "Unity - Datascience Environment"
      description: "Extends Jupyter datascience environment to include the Dockstore client and AWS client"
      kubespawner_override:
        image: public.ecr.aws/unity-ads/datascience:r0.1.0
    - display_name: "Unity - Sounder SIPS Development Environment"
      description: "Packages and tools replicating the JPL Sounder SIPS development environment"
      kubespawner_override:
        image: public.ecr.aws/unity-ads/sounder_sips_dev:r0.1.0
  storage:
    extraVolumes:
      - name: ${shared_volume_name}
        persistentVolumeClaim:
          claimName: ${shared_volume_name}
    extraVolumeMounts:
      - name: ${shared_volume_name}
        mountPath: /unity/ads
  extraAnnotations:
    iam.amazonaws.com/role: ${kube2iam_role_arn}
  cloudMetadata:
    blockWithIptables: false
    ip: 169.254.169.254
hub:
  baseUrl: ${jupyter_base_path}
  extraConfig:
    00-first-config: |

      """
      Unity JupyterHub Custom OAuthenticator to capture and pass Cognito tokens.client_id
      This code is implemented based on https://oauthenticator.readthedocs.io/en/latest/writing-an-oauthenticator.html
      """
      import json
      import base64
      import jwt
      import time

      from jupyterhub.auth import LocalAuthenticator
      from tornado.httpclient import AsyncHTTPClient, HTTPError, HTTPRequest
      from tornado.httputil import url_concat
      from datetime import datetime
      from oauthenticator.oauth2 import OAuthenticator, OAuthLoginHandler

      class UnityOAuthenticator(OAuthenticator):

          # login_service is the text displayed on the "Login with..." button
          login_service = "Unity Common Services"

          access_token = ""
          id_token = ""
          refresh_token = ""
          access_token_expires_in = 0

          # Authenticates the user with Cognito
          async def authenticate(self, handler, data=None):
              # Exchange the OAuth code for an Access Token
              code = handler.get_argument("code")
              http_client = AsyncHTTPClient()

              # Encode client Id and secret
              message = self.client_id + ":" + self.client_secret
              message_bytes = message.encode('ascii')
              base64_bytes = base64.b64encode(message_bytes)
              base64_auth = base64_bytes.decode('ascii')

              params = dict(
                  client_id=self.client_id, code=code, grant_type="authorization_code", redirect_uri=self.oauth_callback_url
              )

              url = url_concat(self.token_url, params)

              req = HTTPRequest(
                  url, method="POST", headers={"Accept": "application/json", "Authorization":"Basic " + base64_auth, "Content-Type":"application/x-www-form-urlencoded"}, body=''
              )

              resp = await http_client.fetch(req)
              resp_json = json.loads(resp.body.decode('utf8', 'replace'))

              if 'access_token' in resp_json:
                  global access_token
                  access_token = resp_json['access_token']
                  global id_token
                  id_token = resp_json['id_token']
                  global refresh_token
                  refresh_token = resp_json['refresh_token']
                  global access_token_expires_in
                  access_token_expires_in = resp_json['expires_in']
              elif 'error_description' in resp_json:
                  raise HTTPError(
                      403,
                      f"An access token was not returned: {resp_json['error_description']}",
                  )
              else:
                  raise HTTPError(500, f"Bad response: {resp}")

              req = HTTPRequest(
                  self.userdata_url,
                  method="GET",
                  headers={"Authorization": f"Bearer {access_token}"},
              )

              resp = await http_client.fetch(req)
              resp_json = json.loads(resp.body.decode('utf8', 'replace'))
              username = resp_json["username"]

              if not username:
                  # No user is authenticated and login has failed
                  return None

              return {
                  'name': username,
                  'auth_state': {
                      'access_token': access_token,
                      'id_token': id_token,
                      'refresh_token': refresh_token,
                      'access_token_expires_in': access_token_expires_in,
                  },
              }

      c.JupyterHub.authenticator_class = UnityOAuthenticator

      # Sets environment
      def modify_pod_hook(spawner, pod):

        global access_token
        pod.spec.containers[0].env.append({"name": "UNITY_COGNITO_ACCESS_TOKEN", "value": access_token})

        global id_token
        pod.spec.containers[0].env.append({"name": "UNITY_COGNITO_ID_TOKEN", "value": id_token})

        global refresh_token
        pod.spec.containers[0].env.append({"name": "UNITY_COGNITO_REFRESH_TOKEN", "value": refresh_token})

        global access_token_expires_in
        epoch_seconds = int(time.time())
        cognito_access_token_expiry = str(access_token_expires_in + epoch_seconds)
        pod.spec.containers[0].env.append({"name": "UNITY_COGNITO_ACCESS_TOKEN_EXPIRY", "value": cognito_access_token_expiry})

        return pod

      c.KubeSpawner.modify_pod_hook = modify_pod_hook
  config:
    OAuthenticator:
      oauth_callback_url: ${jupyter_base_url}/hub/oauth_callback
      client_id: ${oauth_client_id}
      client_secret: ${oauth_client_secret}
    UnityOAuthenticator:
      username_key: username
      authorize_url: ${cognito_base_url}/oauth2/authorize
      token_url: ${cognito_base_url}/oauth2/token
      userdata_url: ${cognito_base_url}/oauth2/userInfo
    JupyterHub:
      authenticator_class: UnityOAuthenticator
proxy:
  service:
    type: NodePort
    nodePorts: 
      http: ${jupyter_proxy_port}
